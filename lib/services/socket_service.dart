import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:overlay_support/overlay_support.dart';
import 'package:flutter/material.dart';

class SocketService {
  late IO.Socket socket;
  bool isConnected = false;
  static final List<OverlaySupportEntry> _notifications =
      []; // Danh s√°ch th√¥ng b√°o

  void showNotification({
    required String message,
    required Color color,
    IconData icon = Icons.info,
    Duration duration = const Duration(seconds: 5),
  }) {
    double baseTopMargin = MediaQueryData.fromView(
                WidgetsBinding.instance.platformDispatcher.views.first)
            .size
            .height *
        0.1;
    double spacing = 80.0; // Kho·∫£ng c√°ch gi·ªØa c√°c th√¥ng b√°o

    // T√≠nh to√°n v·ªã tr√≠ th√¥ng b√°o d·ª±a v√†o s·ªë l∆∞·ª£ng th√¥ng b√°o hi·ªán c√≥
    double topMargin = baseTopMargin + (_notifications.length * spacing);

    // Khai b√°o bi·∫øn entry tr∆∞·ªõc
    late OverlaySupportEntry entry;

    entry = showOverlayNotification(
      (context) => Card(
        margin: EdgeInsets.only(top: topMargin, left: 20, right: 20),
        color: color,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        child: ListTile(
          leading:
              const Icon(Icons.check_circle, color: Colors.white, size: 30),
          title: Text(
            message,
            style: const TextStyle(color: Colors.white, fontSize: 16),
          ),
          trailing: Padding(
            padding: const EdgeInsets.only(right: 4.0),
            child: IconButton(
              icon: const Icon(Icons.close, color: Colors.white),
              onPressed: () {
                entry.dismiss(); // ƒê√≥ng th√¥ng b√°o khi b·∫•m n√∫t X
                _notifications.remove(entry); // X√≥a kh·ªèi danh s√°ch
              },
            ),
          ),
        ),
      ),
      duration: Duration.zero, // Th√¥ng b√°o kh√¥ng t·ª± m·∫•t
    );

    _notifications.add(entry); // L∆∞u th√¥ng b√°o v√†o danh s√°ch
  }

  void connect() {
    socket = IO.io('http://192.168.217.199:6001', <String, dynamic>{
      'transports': ['websocket'],
      'autoConnect': false,
      'forceNew': true,
    });

    socket.onConnect((_) {
      isConnected = true;
      print('‚úÖ Connected to WebSocket Server');
      socket.emit('subscribe',
          {'channel': 'laravel_database_ordercompleted', 'auth': {}});
      socket.emit(
          'subscribe', {'channel': 'laravel_database_orderissue', 'auth': {}});
    });

    socket.on('order.completed', (data) {
      print('üî• D·ªØ li·ªáu nh·∫≠n t·ª´ WebSocket: $data');

      if (data is List && data.length > 1 && data[1] is Map<String, dynamic>) {
        var orderData = data[1];

        if (orderData.containsKey('order')) {
          var order = orderData['order'];
          String tableId = order['table_id'].toString();

          showNotification(
            message: "ƒê∆°n h√†ng b√†n $tableId ƒë√£ ho√†n th√†nh!",
            color: Colors.green,
            icon: Icons.check_circle,
          );
        }
      } else {
        print("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: $data");
      }
    });

    socket.on('order.issue', (data) {
      print('üî• D·ªØ li·ªáu nh·∫≠n t·ª´ WebSocket: $data');

      // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ ph·∫£i l√† danh s√°ch v√† c√≥ √≠t nh·∫•t 2 ph·∫ßn t·ª≠ kh√¥ng
      if (data is List && data.length > 1 && data[1] is Map<String, dynamic>) {
        var orderData = data[1]; // L·∫•y ph·∫ßn t·ª≠ th·ª© hai c·ªßa danh s√°ch

        // Tr√≠ch xu·∫•t th√¥ng tin t·ª´ orderData
        String orderId = orderData['order_id'].toString();
        String itemName = orderData['item_name'].toString();
        String reason = orderData['reason'];
        String orderType = orderData['order_type'].toString();

        // Hi·ªÉn th·ªã th√¥ng b√°o cho nh√¢n vi√™n ph·ª•c v·ª•
        if (orderType == 'dine_in') {
          showNotification(
            message:
                "ƒê∆°n h√†ng #$orderId, M√≥n: $itemName g·∫∑p tr·ª•c tr·∫∑c: $reason",
            color: Colors.red,
            icon: Icons.warning,
          );
        }
      } else {
        print("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: $data");
      }
    });

    socket.onConnectError((error) {
      print('‚ùå Connection Error: $error');
    });

    socket.onDisconnect((_) {
      isConnected = false;
      print('‚ö†Ô∏è Disconnected from WebSocket');
    });

    socket.connect();
  }

  void disconnect() {
    socket.disconnect();
  }
}
